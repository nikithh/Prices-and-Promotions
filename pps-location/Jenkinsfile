properties([parameters([choice(choices:'dev\nprod\ntest',description:'Select profile',name:'profile')])])

properties([parameters([choice(choices:'true\nfalse',description:'Exclude Testcases',name:'tests')])])

node{
        checkout scm

        stage ('Packaging Location') {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                '''
                sh "mvn clean -Dmaven.test.skip=${params.tests} package -P${params.profile}"
        }    
        
        stage('Killing containers') {
            // Get some code from a GitHub repository
            try{
                
            sh '''
            docker kill location-management-9700
            docker kill location-management-9701
            docker kill location-management-9702
            
            '''
            }
            catch(e){
                sh "echo no containers"
            }
            try{
                
            sh '''
            docker rm  location-management-9700
            docker rm location-management-9701
            docker rm location-management-9702
            '''
            }
            catch(e){
                sh "echo no containers"
            }
            
            
        }
        stage ('Building Location container') {
                sh '''
                docker build -t spring/location . 
                '''
        }
        stage ('Running Location container') {
                sh '''
                docker run  --name=location-management-9700 --restart=always --net=prices_and_promotions -d -p 9700:9700 spring/location
                '''
                sh 'sleep 30'
                sh '''
                docker run  --name=location-management-9701 --restart=always --net=prices_and_promotions -d -p 9701:9700 spring/location
                '''
                sh 'sleep 30'
                sh '''
               	docker run  --name=location-management-9702 --restart=always --net=prices_and_promotions -d -p 9702:9700 spring/location
                '''
        }
        if(!(params.tests.toBoolean())){
	        stage('Sonar testcases') {
	                
	            def sonarqubeScannerHome = tool name: 'sonar', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
	                
	            sh "${sonarqubeScannerHome}/bin/sonar-scanner"
	        }
        }
}